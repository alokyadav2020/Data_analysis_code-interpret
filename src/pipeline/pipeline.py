from src.services.gemini_service import generate_analysis_code
from src.services.e2b_service import run_code_in_sandbox
import logging

logger = logging.getLogger(__name__)

def run_data_analysis_pipeline(file_path: str, chart_type: str):
    """
    Pipeline to generate analysis code using Gemini and execute it in a sandbox.
    Returns a list of base64 PNG images (charts) generated by the code.
    """
    try:
        logger.info(f"Starting data analysis pipeline for file: {file_path}, chart type: {chart_type}")
        
        # Step 1: Generate code using Gemini
        logger.debug("Generating analysis code using Gemini")
        generated_code = generate_analysis_code(file_path, chart_type)

        logger.debug(f"Generated code:\n{generated_code}")
        if not generated_code:
            logger.error("No code was generated by the AI model")
            raise RuntimeError("No code was generated by the AI model")
            
        # Step 2: Run the generated code in the sandbox
        logger.debug("Running generated code in sandbox")
        execution = run_code_in_sandbox(file_path=file_path, code=generated_code)
        if execution.error:
            error_msg = (
                f"AI-generated code had an error:\n"
                f"Name: {execution.error.name}\n"
                f"Value: {execution.error.value}\n"
                f"Traceback: {execution.error.traceback}"
            )
            logger.error(error_msg)
            raise RuntimeError(error_msg)

        # Collect all PNG images (base64) from the results
        images_base64 = []
        for result in execution.results:
            if hasattr(result, 'png') and result.png:
                images_base64.append(result.png)
        
        if not images_base64:
            raise RuntimeError("No charts were generated by the code")
            
        return images_base64
    except Exception as e:
        logger.exception(f"Error in data analysis pipeline: {str(e)}")
        raise
